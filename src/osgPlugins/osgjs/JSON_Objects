/*  -*-c++-*- 
 *  Copyright (C) 2010 Cedric Pinson <cedric.pinson@plopbyte.net>
 */

#ifndef JSON_OBJECT
#define JSON_OBJECT

#include <osg/Matrix>
#include <map>
#include <string>
#include <vector>
#include <osg/Array>
#include <osg/Notify>
#include <osg/PrimitiveSet>


struct Vec5
{
    float _v[5];
    Vec5() {}
    Vec5(float a0, float a1, float a2, float a3, float a4) {
        _v[0] = a0;
        _v[1] = a1;
        _v[2] = a2;
        _v[3] = a3;
        _v[4] = a4;
    };
    inline float& operator [] (int i) { return _v[i]; }
    inline float operator [] (int i) const { return _v[i]; }
};

struct JSONObjectBase : public osg::Referenced
{
    static int level;
    static std::string indent();
    virtual void write(std::ostream& str) {}
};

class JSONArray;
struct JSONObject : public JSONObjectBase
{
    typedef std::map<std::string, osg::ref_ptr<JSONObject> > JSONMap;
    typedef std::vector<std::string> OrderList;
    JSONMap _maps;
    JSONMap& getMaps() { return _maps; }
    void writeOrder(std::ostream& str, const OrderList& order);
    virtual void write(std::ostream& str);
    void addChild(const std::string& type, JSONObject* child);
    virtual JSONArray* asArray() { return 0; }

};


struct JSONNode : public JSONObject
{
    void write(std::ostream& str);
};

typedef JSONObject JSONStateSet;
typedef JSONObject JSONMaterial;


struct JSONArray : public JSONObject
{
    typedef std::vector<osg::ref_ptr<JSONObject> > JSONList;
    JSONList _array;
    
    JSONArray(){}
    virtual void write(std::ostream& str);
    JSONList& getArray() { return _array; }
    JSONArray* asArray() { return this; }
};

struct JSONKeyframes : public JSONArray
{
    virtual void write(std::ostream& str);
};


struct JSONVec3Array : public JSONArray
{
    JSONVec3Array() {}
    JSONVec3Array(const osg::Vec3&);
    virtual void write(std::ostream& str);
};

struct JSONVec4Array : public JSONVec3Array
{
    JSONVec4Array(const osg::Vec4&);
};

struct JSONVec5Array : public JSONVec3Array
{
    JSONVec5Array(const Vec5&);
};

struct JSONVec2Array : public JSONVec3Array
{
    JSONVec2Array(const osg::Vec2&);
};

template <class T> 
struct JSONValue : public JSONObject
{
    T _value;
    JSONValue(const T& v) {
        _value = v;
    }
    T& getValue() { return _value; }
    virtual void write(std::ostream& str) {
        str << _value ;
    }
};

template <>
struct JSONValue<std::string> : public JSONObject
{
    std::string _value;
    JSONValue(const std::string& v) {
        _value = v;
    }
    void write(std::ostream& str) {
        str << '"' << _value  << '"';
    }
};


struct JSONMatrix : public JSONArray
{
    JSONMatrix(const osg::Matrix& matrix) {
        for (int i = 0; i < 16; i++) {
            _array.push_back(new JSONValue<double>(matrix.ptr()[i]));
        }
    }
    void write(std::ostream& str)
    {
        str << "[ ";
        for (unsigned int i = 0; i < _array.size(); i++) {
            _array[i]->write(str);
            if (i != _array.size() -1)
                str << ", ";
        }
        str <<  " ]";
    }
};


struct JSONVertexArray : public JSONArray
{
    void write(std::ostream& str)
    {
        str << "[ ";
        for (unsigned int i = 0; i < _array.size(); i++) {
            _array[i]->write(str);
            if (i != _array.size() -1)
                str << ", ";
        }
        str <<  " ]";
    }

    JSONVertexArray() {}
    JSONVertexArray(const osg::Array* array) {
        switch (array->getType()) {
        case osg::Array::Vec2ArrayType:
        {
            const osg::Vec2Array* a = dynamic_cast<const osg::Vec2Array*>(array);
            for (unsigned int i = 0; i < a->getNumElements(); ++i) {
                _array.push_back(new JSONValue<double>((*a)[i][0]));
                _array.push_back(new JSONValue<double>((*a)[i][1]));
            }
            break;
        }
        case osg::Array::Vec3ArrayType:
        {
            const osg::Vec3Array* a = dynamic_cast<const osg::Vec3Array*>(array);
            for (unsigned int i = 0; i < a->getNumElements(); ++i) {
                _array.push_back(new JSONValue<double>((*a)[i][0]));
                _array.push_back(new JSONValue<double>((*a)[i][1]));
                _array.push_back(new JSONValue<double>((*a)[i][2]));
            }
            break;
        }
        case osg::Array::Vec4ArrayType:
        {
            const osg::Vec4Array* a = dynamic_cast<const osg::Vec4Array*>(array);
            for (unsigned int i = 0; i < a->getNumElements(); ++i) {
                _array.push_back(new JSONValue<double>((*a)[i][0]));
                _array.push_back(new JSONValue<double>((*a)[i][1]));
                _array.push_back(new JSONValue<double>((*a)[i][2]));
                _array.push_back(new JSONValue<double>((*a)[i][3]));
            }
            break;
        }
        case osg::Array::Vec4ubArrayType:
        {
            const osg::Vec4ubArray* a = dynamic_cast<const osg::Vec4ubArray*>(array);
            for (unsigned int i = 0; i < a->getNumElements(); ++i) {
                _array.push_back(new JSONValue<double>((*a)[i][0]/255.0));
                _array.push_back(new JSONValue<double>((*a)[i][1]/255.0));
                _array.push_back(new JSONValue<double>((*a)[i][2]/255.0));
                _array.push_back(new JSONValue<double>((*a)[i][3]/255.0));
            }
            break;
        }
        default:
            osg::notify(osg::WARN) << "Array of type " << array->getType() << " not supported" << std::endl;
            break;
        }
    }
};

struct JSONBufferArray : public JSONObject
{
    JSONBufferArray() {}
    JSONBufferArray(const osg::Array* array) {
        getMaps()["Elements"] = new JSONVertexArray(array);
        getMaps()["ItemSize"] = new JSONValue<int>(array->getDataSize());
        getMaps()["Type"] = new JSONValue<std::string>("ARRAY_BUFFER"); //0x8892);
    }

    void write(std::ostream& str);
};


JSONObject* getDrawMode(GLenum mode);

struct JSONDrawArray : public JSONObject
{
    JSONDrawArray(osg::DrawArrays& array);
};


template <class T>
struct JSONDrawElements : public JSONObject
{

    JSONDrawElements(T& array) {
        JSONVertexArray* arr = new JSONVertexArray();
        for (unsigned int i = 0; i < array.getNumIndices(); ++i)
            arr->getArray().push_back(new JSONValue<unsigned int>(array.index(i)));
        JSONBufferArray* buf = new JSONBufferArray();
        buf->getMaps()["ItemSize"] = new JSONValue<unsigned int>(1);
        buf->getMaps()["Type"] = new JSONValue<std::string>("ELEMENT_ARRAY_BUFFER");
        buf->getMaps()["Elements"] = arr;

        getMaps()["Indices"] = buf;
        if (array.getMode() == GL_QUADS) {
            int size = array.getNumIndices();
            arr->getArray().clear();
            for (int i = 0; i < size/4; ++i) {
                arr->getArray().push_back(new JSONValue<unsigned int>(array.index(i*4 + 0)));
                arr->getArray().push_back(new JSONValue<unsigned int>(array.index(i*4 + 1)));
                arr->getArray().push_back(new JSONValue<unsigned int>(array.index(i*4 + 3)));

                arr->getArray().push_back(new JSONValue<unsigned int>(array.index(i*4 + 1)));
                arr->getArray().push_back(new JSONValue<unsigned int>(array.index(i*4 + 2)));
                arr->getArray().push_back(new JSONValue<unsigned int>(array.index(i*4 + 3)));
            }
            getMaps()["Mode"] = getDrawMode(osg::PrimitiveSet::TRIANGLES);
        } else
            getMaps()["Mode"] = getDrawMode(array.getMode());

    }

};

// use to convert draw array quads to draw elements triangles
JSONDrawElements<osg::DrawElementsUShort>* createJSONDrawElements(const osg::DrawArrays& drawArray);


JSONObject* createJSONStateSet(osg::StateSet* stateset);

#endif
